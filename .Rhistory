p.ids <- ids[1, "id"]
for (k in 1:dim(ids)[1]) {
if (!is.na(ids[k+1, "id"])) {
p.ids <- paste(p.ids,  ids[k+1, "id"], sep = paste(" OR ", i, "_atbats.pitcher = ", sep = ""))
}
}
raw.pitches <- dbGetQuery(MLB, paste("SELECT DISTINCT x0 FROM ", i, "_pitchFX RIGHT JOIN ", i, "_atbats ON (", i, "_pitchFX.atbat_id = ", i, "_atbats.num AND ", i, "_pitchFX.url = ", i, "_atbats.url)  WHERE ", i, "_atbats.pitcher = ", p.ids, sep = ""))
pitches <- cbind(raw.pitches, year = i)
pitchFX <- rbind(pitchFX, pitches)
}
}
data <- visualize(first.date = "2011-01-01", last.date = Sys.Date(), pitcher.name = c("Justin Verlander", "Mariano Rivera"), pitch.type = c("FF", "CU"), zone = "all", time = 0.01)
library(XML) #Load necessary packages for this package
library(plyr)
library(lubridate)
library(stringr)
library(reshape)
library(ggplot2)
library(animation)
library(RMySQL)
url <- "http://gd2.mlb.com/components/game/mlb/year_2011/month_04/day_15/
gid_2011_04_15_sfnmlb_arimlb_1/inning/inning_all.xml"
doc <- xmlParse(url)
url <- "http://gd2.mlb.com/components/game/mlb/year_2011/month_04/day_15/
gid_2011_04_15_sfnmlb_arimlb_1/inning/inning_all.xml"
doc <- xmlParse(url)
fix(url)
url <- "http://gd2.mlb.com/components/game/mlb/year_2011/month_04/day_15/gid_2011_04_15_sfnmlb_arimlb_1/inning/inning_all.xml"
doc <- xmlParse(url)
atbat <- getNodeSet(doc, "//atbat")
atbat.info <- llply(atbat, function(x) { xmlAttrs(x) })
atbat[1]
library(XML) #Load necessary packages for this package
library(plyr)
library(lubridate)
library(stringr)
library(reshape)
library(ggplot2)
library(animation)
library(RMySQL)
#Establish connection with MLB Database
drv <- dbDriver("MySQL")
MLB <- dbConnect(drv, user="root", password="Stats4Life", port=3306, dbname="MLB", host="127.0.0.1")
#Scraping work horse (for use strictly with package)
parseURLs <- function(urls) { #Function that greatly reduces time required to build tables.
docs <- NULL
url.vector <- NULL
for (i in urls) {
cat(i, "\n")
doc <- try_default(xmlParse(i), NULL, quiet = TRUE)
if (!is.null(doc)) {
docs <- c(docs, doc) #Keep non-empty documents
url.vector <- c(url.vector, i) #Keep urls that have data
}
}
return(docs)
}
scrapePitchFX <- function(start = "2012-01-01", end = Sys.Date()) { #make fields flexible?
first.date <- paste("('", start, "')", sep = "")
if (year(start) < 2005) stop("Not only is pitchFX data not avaliable before 2008, data on each game isn't complete until 2005")
if (year(start) < 2008) stop("Warning: pitchFX data wasn't recorded consistently until 2008. Please consider a later start date.")
last.date <- paste("('", end, "')", sep = "")
if (end > Sys.Date()) stop("Sorry, I can't scrape data on the future!")
urls <- dbGetQuery(MLB, paste("SELECT url FROM all_games WHERE all_games.date >= ", first.date, "AND all_games.date <=", last.date, sep = ""))
t <- urls[,"url"]
docs <- parseURLs(urls = t)
return(docs)
#all.tags <- c("ax", "ay", "az", "break_angle", "break_length", "break_y", "cc", "des",
#              "end_speed", "id", "mt", "nasty", "on_1b", "on_2b", "on_3b", "pfx_x", "pfx_z", "pitch_type",
#              "px", "pz", "spin_dir", "spin_rate", "start_speed", "sv_id", "sz_bot", "sz_top",
#              "tfs", "tfs_zulu", "type", "type_confidence", "vx0", "vy0", "vz0",
#              "x", "x0", "y", "y0", "z0", "zone")
#rawTable <- docsToDataFrame(urls = t, tags = all.tags)
#How do I write table in proper directory? What format should I use?
}
docs <- scrapePitchFX()
fix(doc)
library(devtools)
install_github('pitchFX', 'cpsievert')
?devtools
?ddply
library(plyr)
?plyr
?ddply
head(baseball)
install_github('pitchFX', 'cpsievert')
library(pitchFX)
?pitchFX
?scrapePitchFX
scrapePitchFX()
install_github('gghammock', 'heike')
library(gghammock)
?gghammock
gghammock()
?pitchFX
?gghammock
install_github('pitchFX', 'cpsievert')
install_github('pitchFX', 'cpsievert')
install_github('pitchFX', 'cpsievert')
library(pitchFX)
?pitchFX
?scrapePitchFX
library(devtools)
install_github('pitchFX', 'cpsievert')
install_github('pitchFX', 'cpsievert')
install_github('pitchFX', 'cpsievert')
library(pitchFX)
?pitchFX
?scrapePitchFX
library(devtools)
install_github('pitchFX', 'cpsievert')
library(pitchFX)
?pitchFX
?scrapePitchFX
ptm <- proc.time()
data <- scrapePitchFX(start = "2011-05-01", end = "2011-05-01")
ptm
library(devtools)
setwd("~/Desktop/github/local/pitchFX")
document(".")
install(".") #install the package
data(all_games)
some.games <- subset(all.games, date >= as.POSIXct("2011-10-01") & date <= as.POSIXct("2011-10-02"))
urls <- some.games[, "url"]
data <- urlsToDataFrame(urls, tables = list(atbat = c("away_team_runs", "b", "b_height", "batter", "des", "event")))
library(pitchFX)
data <- urlsToDataFrame(urls, tables = list(atbat = c("away_team_runs", "b", "b_height", "batter", "des", "event")))
warnings()
View(data)
document(".")
install(".") #install the package
adjust()
data <- urlsToDataFrame(urls, tables = list(atbat = c("away_team_runs", "b", "b_height", "batter", "des", "event")))
install(".") #install the package
data <- urlsToDataFrame(urls, tables = list(atbat = c("away_team_runs", "b", "b_height", "batter", "des", "event")))
View(data)
a <- rep(c(NA, 1/0:3), 10)
table(a)
a
install(".") #install the package
data <- urlsToDataFrame(urls)
str(data)
install(".") #install the package
data <- urlsToDataFrame(urls)
str(data)
urlsToDataFrame <- function(urls, tables = list(atbat = NULL, pitch = NULL)) {
if (is.null(names(tables))) stop("Please specify at least one XML node of interest.")
#Order tables alphabetically. This is important because the atbat node must be parsed first if you want an atbat ID for the pitch table
orders <- order(names(tables))
ordered.tables <- llply(orders, function(x) { tables[[x]] })
names(ordered.tables) <- names(tables)[orders]
#Start parsing the URLs
docs <- NULL
url.vector <- NULL
for (i in urls) {
cat(i, "\n")
doc <- try_default(xmlParse(i), NULL, quiet = TRUE)
if (!is.null(doc)) {
docs <- c(docs, doc) #Keep non-empty documents
url.vector <- c(url.vector, i) #Keep urls that have data
}
}
#Turn the XML documents into a list of data frames
ctr <- 1
for (j in names(ordered.tables)) {
fields <- unlist(ordered.tables[[ctr]])
frame <- docsToDataFrame(docs = docs, node = j, fields = fields, urls = url.vector)
if (j == "atbat" & !any(names(tables) == "pitch")) {
frame <- frame$final
}
if (j == "pitch" & any(names(tables) == "atbat")) {
frame$num <- frames$atbat_id
frames$atbat_id <- NULL
}
if (ctr == 1) {
frames <- frame
} else {
frames <- list(as.data.frame(frames), frame)
}
ctr <- ctr + 1
}
if (length(names(tables)) > 1) names(frames) <- names(ordered.tables)
return(names(frames$atbat))
#names(frames$atbat) <- gsub("final.", "", names(frames$atbats))
return(frames)
}
install(".") #install the package
data <- urlsToDataFrame(urls)
fix(urlsToDataFrame)
data(all_games)
some.games <- subset(all.games, date >= as.POSIXct("2011-10-01") & date <= as.POSIXct("2011-10-02"))
urls <- some.games[, "url"]
data <- urlsToDataFrame(urls)
str(data)
install(".") #install the package
data <- urlsToDataFrame(urls)
str(data)
install(".") #install the package
data <- urlsToDataFrame(urls)
pitches <- data$pitch
atbats <- data$atbat
pitchFX <- join(pitches, atbats, by = c("num", "url"))
data <- urlsToDataFrame(urls, list(atbat = NULL,
pitch = c("ax", "ay", "az", "vx0", "vy0", "vz0", "x", "x0", "y", "y0", "z0", "pitch_type", "zone"))
)
pitches <- data$pitch
atbats <- data$atbat
pitchFX <- join(pitches, atbats, by = c("num", "url"))
pitchFX2 <- pitchFX[pitchFX$zone < 4 & pitchFX$pitch_type == c("FF", "CU", "SL"), ]
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws")
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws")
warnings()
install(".") #install the package
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws")
warnings()
qplot(rnorm())
qplot(rnorm(10))
qplot(rnorm(10)) + NULL
install(".") #install the package
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws")
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
install(".") #install the package
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
animateFX(pitchFX2, color = "p_throws", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
install(".") #install the package
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
install(".") #install the package
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
install(".") #install the package
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
ls()
head(colors)
summary(colors)
names(colors) <- color
Q
install(".") #install the package
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
animateFX(pitchFX2, color = "p_throws", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
install(".") #install the package
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
install(".") #install the package
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
install(".") #install the package
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
install(".") #install the package
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
traceback()
install(".") #install the package
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
ls()
snapshot$x <- with(snapshot, x0 + vx0*t + .5*ax*t^2) #Inside/Outside location (at time t)
t
snapshot$vx0*t
snapshot$vx0
install(".") #install the package
install(".") #install the package
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
Q
install(".") #install the package
animateFX(pitchFX2, color = "pitch_type", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
animateFX(pitchFX2, color = "p_throws", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
install(".") #install the package
animateFX(pitchFX2, color = "p_throws", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
install(".") #install the package
animateFX(pitchFX2, color = "p_throws", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
install(".") #install the package
animateFX(pitchFX2, color = "p_throws", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
animateFX(pitchFX2, color = "p_throws", facets = "p_throws")
install(".") #install the package
animateFX(pitchFX2, color = "p_throws", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
dim(snapshot)
snapshot[, facets]
snapshot[, color]
xtabs(~color+facets, snapshot)
xtabs(~snapshot[,color]+snapshot[,facets])
print(qplot(x = x, y = z, data = snapshot, alpha=I(0.5), size=10*-y,
colour=snapshot[,color], facets=p_throws ~ ., #How do I automate these options?
xlim=c(-3.5, 3.5), xlab="Inside/Outside", ylim=c(0, 10), ylab="Height from Ground") + scale_size(guide="none") + layer)
print(qplot(x = x, y = z, data = snapshot, alpha=I(0.5), size=10*-y,
colour=p_throws, facets=p_throws ~ ., #How do I automate these options?
xlim=c(-3.5, 3.5), xlab="Inside/Outside", ylim=c(0, 10), ylab="Height from Ground") + scale_size(guide="none") + layer)
snapshot$col <- snapshot[, color]
print(qplot(x = x, y = z, data = snapshot, alpha=I(0.5), size=10*-y,
colour=col, facets=p_throws ~ ., #How do I automate these options?
xlim=c(-3.5, 3.5), xlab="Inside/Outside", ylim=c(0, 10), ylab="Height from Ground") + scale_size(guide="none") + layer)
print(qplot(x = x, y = z, data = snapshot, alpha=I(0.5), size=10*-y,
colour=col, facets=p_throws ~ ., #How do I automate these options?
xlim=c(-3.5, 3.5), xlab="Inside/Outside", ylim=c(0, 10), ylab="Height from Ground") +
scale_colour(color) +
scale_size(guide="none") + layer)
print(qplot(x = x, y = z, data = snapshot, alpha=I(0.5), size=10*-y,
colour=col, facets=p_throws ~ ., #How do I automate these options?
xlim=c(-3.5, 3.5), xlab="Inside/Outside", ylim=c(0, 10), ylab="Height from Ground") +
scale_discrete_colour(color) +
scale_size(guide="none") + layer)
print(qplot(x = x, y = z, data = snapshot, alpha=I(0.5), size=10*-y,
colour=col, facets=p_throws ~ ., #How do I automate these options?
xlim=c(-3.5, 3.5), xlab="Inside/Outside", ylim=c(0, 10), ylab="Height from Ground") +
scale_colour_discrete(color) +
scale_size(guide="none") + layer)
layer <- NULL
print(qplot(x = x, y = z, data = snapshot, alpha=I(0.5), size=10*-y,
colour=col, facets=p_throws ~ ., #How do I automate these options?
xlim=c(-3.5, 3.5), xlab="Inside/Outside", ylim=c(0, 10), ylab="Height from Ground") +
scale_colour_discrete(color) +
scale_size(guide="none") + layer)
Q
install(".") #install the package
animateFX(pitchFX2, color = "p_throws", facets = "p_throws", layer = scale_color_brewer(palette="Set2"))
animateFX(pitchFX2, color = "p_throws", facets = "p_throws", layer = list(facet_wrap(~pitch_type), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, color = "p_throws", facets = "p_throws", layer = list(facet_wrap(~p_throws), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, color = "p_throws", facets = "pitch_type", layer = list(facet_wrap(~pitch_type), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, color = "p_throws", facets = c("p_throws","pitch_type"), layer = list(facet_grid(p_throws~pitch_type), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, color = "p_throws", facets = c(xlab("My personal x label"), "p_throws","pitch_type"), layer = list(facet_grid(p_throws~pitch_type), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, color = "p_throws", facets = c( "p_throws","pitch_type"), layer = list(xlab("My personal x label"),facet_grid(p_throws~pitch_type), scale_color_brewer("p_throws", palette="Set2")))
check(".") #Check if changes are legit
setwd("~/Desktop/github/local/pitchFX")
document(".")
check(".")
document(".")
check(".")
document(".")
check(".")
document(".")
check(".")
animateFX(pitchFX2, color = "p_throws", facets = c( "p_throws","pitch_type"), layer = list(xlab("My personal x label"),facet_grid(p_throws~pitch_type), scale_color_brewer("p_throws", palette="Set2")))
install(".") #install the package
animateFX(pitchFX2, color = "p_throws", facets = c( "p_throws","pitch_type"), layer = list(xlab("My personal x label"),facet_grid(p_throws~pitch_type), scale_color_brewer("p_throws", palette="Set2")))
install(".") #install the package
animateFX(pitchFX2, color = "p_throws", facets = c( "p_throws","pitch_type"), layer = list(xlab("My personal x label"),facet_grid(p_throws~pitch_type), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), colour_grid(pitch_type), scale_color_brewer("p_throws", palette="Set2")))
install(".") #install the package
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), colour_grid(pitch_type), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), colour_grid(pitch_type), scale_color_brewer("p_throws", palette="Set2")))
install(".") #install the package
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), colour_grid(pitch_type), scale_color_brewer("p_throws", palette="Set2")))
traceback()
n
install(".") #install the package
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), colour_grid(pitch_type), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), colour_grid(pitch_type), scale_color_brewer("p_throws", palette="Set2")))
n
n
n
n
n
n
install(".") #install the package
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), colour_grid(pitch_type), scale_color_brewer("p_throws", palette="Set2")))
install(".") #install the package
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), colour_grid(pitch_type), scale_color_brewer("p_throws", palette="Set2")))
Q
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), colour_grid(pitch_type), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), colour_grid(pitch_type), scale_color_brewer("p_throws", palette="Set2")))
install(".") #install the package
install(".") #install the package
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), colour_grid(pitch_type), scale_color_brewer("p_throws", palette="Set2")))
install(".") #install the package
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), colour_grid(pitch_type), scale_color_brewer("p_throws", palette="Set2")))
install(".") #install the package
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), colour_grid(pitch_type), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), scale_colour_discrete(pitch_type), scale_color_brewer("p_throws", palette="Set2")))
install(".") #install the package
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), scale_colour_discrete(~pitch_type), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2)
animateFX(pitchFX2), layer = list(facet_grid(~p_throws), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), scale_color_brewer("p_throws", palette="Set2")))
install(".") #install the package
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), scale_color_brewer("p_throws", palette="Set2")))
?na.omit
install(".") #install the package
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), scale_colour_discrete(~pitch_type), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), scale_colour_discrete(pitch_type), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), scale_colour_discrete("pitch_type"), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), scale_colour_discrete(pitch_types), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), scale_colour_discrete(~pitch_types), scale_color_brewer("p_throws", palette="Set2")))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), scale_colour_discrete(pitch_types), scale_color_brewer("p_throws", palette="Set2")))
?na.omit
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA))
na.omit(DF)
m <- as.matrix(DF)
na.omit(m)
p <- ggplot(diamonds, aes(x = carat))
p <- p + layer(
geom = "bar",
geom_params = list(fill = "steelblue"),
stat = "bin",
stat_params = list(binwidth = 2)
)
p
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), geom_params = list(fill = pitch_type)))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), geom_params = list(fill = pitch_types)))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), geom_params = list(fill = pitcher)))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), scale_colour_discrete(pitcher)))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), scale_colour_discrete(event)))
p <- ggplot(Oxboys, aes(age, height, group = Subject)) +
geom_line()
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), geom_point(aes(colour = factor(event)))))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), geom_point(aes(colour = factor(pitch_types)))))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), geom_point(aes(colour = factor(event)))))
animateFX(pitchFX2, layer = list(facet_grid(~p_throws), geom_point(aes(colour = event))))
animateFX(pitchFX2, layer = list(facet_grid(pitch_type~p_throws), geom_point(aes(colour = event))))
animateFX(pitchFX2, layer = list(facet_grid(stand~p_throws), geom_point(aes(colour = pitch_type))))
install(".") #install the package
document(".")
document(".")
install(".") #install the package
animateFX(pitchFX2, layer = list(facet_grid(stand~p_throws), geom_point(aes(colour = pitch_type))))
animateFX(pitchFX2, layer = list(facet_grid(stand~p_throws), geom_point(aes(colour = alpha(pitch_type, 0.5)))))
animateFX(pitchFX2, layer = list(facet_grid(stand~p_throws), geom_point(colour = alpha(pitch_type, 0.5))))
d <- ggplot(diamonds, aes(carat, price)) + xlim(1,3) +
opts(legend.position = "none")
d
d + geom_point() + geom_density2d()
install(".") #install the package
install(".") #install the package
animateFX(pitchFX2, layer = list(facet_grid(stand~p_throws), geom_point(colour = alpha(pitch_type, 0.5))))
animateFX(pitchFX2)
install(".") #install the package
animateFX(pitchFX2)
install(".") #install the package
animateFX(pitchFX2)
install(".") #install the package
animateFX(pitchFX2)
d + stat_density2d(geom = "point", aes(size = ..density..),
contour = F) + scale_area(to = c(0.2, 1.5))
d <- ggplot(diamonds, aes(carat, price)) + xlim(1,3) +
opts(legend.position = "none")
d + stat_density2d(geom = "point", aes(size = ..density..),
contour = F) + scale_area(to = c(0.2, 1.5))
d + stat_density2d(geom = "tile", aes(fill = ..density..),
contour = F)
d + stat_density2d(geom = "point", aes(fill = ..density..),
contour = F)
d + stat_density2d(geom = "point", aes(size = ..density..),
contour = F) + scale_area(to = c(0.2, 1.5))
install(".") #install the package
animateFX(pitchFX2)
animateFX(pitchFX2, layer = list(geom_point() + geom_density2d()))
animateFX(pitchFX2, layer = list(geom_point()))
animateFX(pitchFX2, layer = list(stat_density2d(geom = "tile", aes(fill = ..density..), contour = F))
)
animateFX(pitchFX2, layer = list(geom_point()))
animateFX(pitchFX2, layer = list(geom_point(shape=10*-y)))
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point()))
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point()))
install(".") #install the package
animateFX(pitchFX2)
install(".") #install the package
install(".") #install the package
animateFX(pitchFX2)
animateFX(pitchFX2, layer = list(geom_point()))
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point()))
animateFX(pitchFX2, layer = list(geom_point()))
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point()))
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point()))
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point()))
install(".") #install the package
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point()))
animateFX(pitchFX2, layer = list(geom_point()))
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point()))
animateFX(pitchFX2, layer = list(geom_point(), facet_grid(stand~p_throws)))
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point(), scale_color_manual(values = pitch_types), facet_grid(stand~p_throws)))
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point(), scale_color_manual(values = pitch_types), facet_grid(stand~p_throws)))
animateFX(pitchFX2, layer = list(geom_point(), facet_grid(stand~p_throws)))
animateFX(pitchFX2, layer = list(geom_point(), facet_grid(stand~p_throws)))
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point(), facet_grid(stand~p_throws)))
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point(), facet_grid(stand~p_throws)))
animateFX(pitchFX2, layer = list(geom_point(), facet_grid(stand~p_throws)))
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point(aes(alpha = 0.5)), facet_grid(stand~p_throws)))
d <- stat_density2d(geom = "tile", aes(fill = ..density..), contour = F)
animateFX(pitchFX2, layer = list(d))
print(ggplot(snapshot, aes(x, z, colour=pitch_types, size=10*-y)) #how do I include alpha?
d <- stat_density2d(geom = "tile", aes(fill = ..density..), contour = F)
animateFX(pitchFX2, layer = list(d))
d <- stat_density2d(geom = "point", aes(fill = ..density..), contour = F)
animateFX(pitchFX2, layer = list(d))
d <- stat_density2d(geom = "point", aes(colour = NULL, fill = ..density..), contour = F)
animateFX(pitchFX2, layer = list(d))
animateFX(pitchFX2, layer = list(geom_point(aes(alpha = 0.5, colour = p_throws)), facet_grid(stand~p_throws)))
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point(aes(alpha = 0.5)), facet_grid(stand~p_throws)))
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point(aes(alpha = 0.5)), facet_grid(stand~p_throws))) #How do I add titles to the facets (stand vs. p_throws)
install(".") #install the package
animateFX(pitchFX2, layer = list(geom_point(aes(alpha = 0.5, colour = p_throws, shape = pitch_type)), facet_grid(stand~p_throws)))
animateFX(pitchFX2, layer = list(geom_point(aes(alpha = 0.5, colour = p_throws)), facet_grid(stand~p_throws)))
animateFX(pitchFX2, layer = list(geom_point(aes(alpha = 0.5, colour = p_throws, shape = type)), facet_grid(stand~p_throws)))
data <- scrapePitchFX(start = "2011-10-01", end = "2011-10-02")
pitches <- data$pitch
atbats <- data$atbat
pitchFX <- join(pitches, atbats, by = c("num", "url"))
pitchFX2 <- pitchFX[pitchFX$zone < 4 & pitchFX$pitch_type == c("FF", "CU", "SL"), ]
animateFX(pitchFX2, layer = list(geom_point(aes(alpha = 0.5, colour = p_throws, shape = type)), facet_grid(stand~p_throws)))
animateFX(pitchFX2, layer = list(geom_point(aes(alpha = 0.5, shape = type)), facet_grid(stand~p_throws)))
animateFX(pitchFX2, layer = list(geom_density2d()))
